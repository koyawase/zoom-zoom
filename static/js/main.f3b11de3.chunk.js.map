{"version":3,"sources":["components/customMarker/CustomMarker.js","components/homeZoneLayer/HomeZoneLayer.js","images/loading-spinner.gif","components/loadingSpinner/LoadingSpinner.js","components/map/Map.js","App.js","reportWebVitals.js","index.js"],"names":["CustomMarker","iconUrl","position","latitude","Number","longitude","height","src","alt","HomeZoneLayer","data","id","type","source","paint","LoadingSpinner","className","spinner","Map","lat","long","zoom","vehicleData","homeZones","useState","width","viewport","setViewport","userLocation","setUserLocation","mapboxApiAccessToken","onViewportChange","nextViewport","mapStyle","map","i","style","right","top","positionOptions","enableHighAccuracy","trackUserLocation","showAccuracyCircle","onGeolocate","geoLocation","coords","auto","defaultProps","App","setVehicleData","setHomeZones","isLoading","setIsLoading","a","Promise","all","fetch","then","responses","json","catch","err","useEffect","fetchData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAaeA,EAXM,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAC/B,OACE,cAAC,IAAD,CACEC,SAAUC,OAAOF,EAASC,UAC1BE,UAAWD,OAAOF,EAASG,WAF7B,SAIE,qBAAKC,OAAO,KAAKC,IAAKN,EAASO,IAAI,0BCO1BC,EAbO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACvB,OACE,cAAC,IAAD,CAAQC,GAAG,aAAaC,KAAK,UAAUF,KAAMA,EAA7C,SACE,cAAC,IAAD,CACEC,GAAG,mBACHC,KAAK,OACLC,OAAO,aACPC,MAAO,CAAE,aAAc,UAAW,aAAc,QCTzC,MAA0B,4CCa1BC,G,MATQ,WACrB,OACE,sBAAKC,UAAU,kBAAf,UACE,qBAAKT,IAAKU,EAAST,IAAI,YACvB,8C,QCHAU,EAAM,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,IAAKC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,UAAgB,EAC3BC,mBAAS,CACvClB,OAAQ,QACRmB,MAAO,QACPtB,SAAUgB,EACVd,UAAWe,EACXC,KAAMA,IANmD,mBACpDK,EADoD,KAC1CC,EAD0C,OASnBH,mBAAS,IATU,mBASpDI,EAToD,KAStCC,EATsC,KAiB3D,OACE,eAAC,IAAD,2BACMH,GADN,IAEEI,qBAAsB,6FACtBC,iBAAkB,SAAAC,GAAY,OAAIL,EAAYK,IAC9CC,SAAS,kCAJX,UAOE,2CAAcL,EAAaT,OAC3B,4CAAeS,EAAaR,QAE3BE,EAAYY,KAAI,SAACxB,EAAMyB,GACtB,OAAO,cAAC,EAAD,eAA6CzB,GAA7C,wBAAoCyB,OAG7C,cAAC,EAAD,eAAmBZ,IAEnB,cAAC,IAAD,CACEa,MAxBuB,CAC3BC,MAAO,GACPC,IAAK,IAuBDC,gBAAiB,CAACC,oBAAoB,GACtCC,mBAAmB,EACnBC,oBAAoB,EACpBC,YAAa,SAACC,GAAD,OAAiBf,EAAgB,CAAC,IAAOe,EAAYC,OAAO1C,SAAU,KAAQyC,EAAYC,OAAOxC,aAC9GyC,MAAI,SAMZ5B,EAAI6B,aAAe,CACjB5B,KAAM,QACNC,KAAM,QACNC,KAAM,IAGOH,QClBA8B,MApCf,WAAgB,IAAD,EACyBxB,mBAAS,IADlC,mBACNF,EADM,KACO2B,EADP,OAEqBzB,mBAAS,IAF9B,mBAEND,EAFM,KAEK2B,EAFL,OAGqB1B,oBAAS,GAH9B,mBAGN2B,EAHM,KAGKC,EAHL,iDAMb,sBAAAC,EAAA,sEACQC,QAAQC,IAAI,CAChBC,MAAM,8CACNA,MAAM,kDAELC,MAAK,SAAAC,GACJA,EAAU,GAAGC,OAAOF,MAAK,SAAA/C,GAAI,OAAIuC,EAAevC,MAChDgD,EAAU,GAAGC,OAAOF,MAAK,SAAA/C,GAAI,OAAIwC,EAAaxC,SAE/CkD,OAAM,SAAAC,GACL,MAAMA,KAVZ,OAYET,GAAa,GAZf,4CANa,sBAyBb,OAJAU,qBAAU,YArBG,mCAsBXC,KACC,IAGD,qBAAK/C,UAAU,MAAf,SACGmC,EACC,cAAC,EAAD,IAEA,cAAC,EAAD,CAAK7B,YAAaA,EAAaC,UAAWA,OCrBnCyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f3b11de3.chunk.js","sourcesContent":["import { Marker } from \"react-map-gl\";\r\n\r\nconst CustomMarker = ({ iconUrl, position }) => {\r\n  return (\r\n    <Marker\r\n      latitude={Number(position.latitude)}\r\n      longitude={Number(position.longitude)}\r\n    >\r\n      <img height=\"50\" src={iconUrl} alt=\"vehicle map marker\" />\r\n    </Marker>\r\n  );\r\n};\r\n\r\nexport default CustomMarker;\r\n","import { Source, Layer } from \"react-map-gl\";\r\n\r\nconst HomeZoneLayer = ({ data }) => {\r\n  return (\r\n    <Source id=\"home-zones\" type=\"geojson\" data={data}>\r\n      <Layer\r\n        id=\"home-zones-layer\"\r\n        type=\"line\"\r\n        source=\"home-zones\"\r\n        paint={{ \"line-color\": \"#f7590d\", \"line-width\": 3 }}\r\n      />\r\n    </Source>\r\n  );\r\n};\r\n\r\nexport default HomeZoneLayer;\r\n","export default __webpack_public_path__ + \"static/media/loading-spinner.9dd8c81d.gif\";","import spinner from \"../../images/loading-spinner.gif\";\r\n\r\nimport \"./LoadingSpinner.css\";\r\n\r\nconst LoadingSpinner = () => {\r\n  return (\r\n    <div className=\"loading-spinner\">\r\n      <img src={spinner} alt=\"loading\"></img>\r\n      <h1>Loading</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import React, { useState } from \"react\";\r\nimport ReactMapGL, {GeolocateControl} from \"react-map-gl\";\r\n\r\nimport { CustomMarker, HomeZoneLayer } from \"../../components\";\r\n\r\nconst Map = ({ lat, long, zoom, vehicleData, homeZones }) => {\r\n  const [viewport, setViewport] = useState({\r\n    height: \"100vh\",\r\n    width: \"100wh\",\r\n    latitude: lat,\r\n    longitude: long,\r\n    zoom: zoom\r\n  });\r\n\r\n  const [userLocation, setUserLocation] = useState({});\r\n\r\n  const geolocateControlStyle= {\r\n    right: 10,\r\n    top: 10\r\n  };\r\n\r\n\r\n  return (\r\n    <ReactMapGL\r\n      {...viewport}\r\n      mapboxApiAccessToken={\"pk.eyJ1Ijoia295YXdhc2UiLCJhIjoiY2trcTVycWd6MzF3dzJ1bGFjd3Nhb2NvZyJ9.LfQ02Q86X6jWR-S3kc1j2g\"}\r\n      onViewportChange={nextViewport => setViewport(nextViewport)}\r\n      mapStyle=\"mapbox://styles/mapbox/basic-v9\"\r\n    >\r\n      \r\n      <h2>Latitude {userLocation.lat}</h2>\r\n      <h2>Longitude {userLocation.long}</h2>\r\n\r\n      {vehicleData.map((data, i) => {\r\n        return <CustomMarker key={`custom-marker-${i}`} {...data} />;\r\n      })}\r\n\r\n      <HomeZoneLayer {...homeZones}/>\r\n\r\n      <GeolocateControl\r\n        style={geolocateControlStyle}\r\n        positionOptions={{enableHighAccuracy: true}}\r\n        trackUserLocation={true}\r\n        showAccuracyCircle={false}\r\n        onGeolocate={(geoLocation) => setUserLocation({\"lat\": geoLocation.coords.latitude, \"long\": geoLocation.coords.longitude})}\r\n        auto\r\n      />\r\n    </ReactMapGL>\r\n  );\r\n};\r\n\r\nMap.defaultProps = {\r\n  lat: -41.2924,\r\n  long: 174.778,\r\n  zoom: 15\r\n};\r\n\r\nexport default Map;\r\n","import { useState, useEffect } from \"react\";\r\nimport { LoadingSpinner, Map } from \"./components\";\r\n\r\nfunction App() {\r\n  const [vehicleData, setVehicleData] = useState([]);\r\n  const [homeZones, setHomeZones] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Run fetch in parallel and set is loading to false once both APIs have returned successfully\r\n  async function fetchData() {\r\n    await Promise.all([\r\n      fetch(\"https://api.mevo.co.nz/public/vehicles/all\"),\r\n      fetch(\"https://api.mevo.co.nz/public/home-zones/all\")\r\n    ])\r\n      .then(responses => {\r\n        responses[0].json().then(data => setVehicleData(data));\r\n        responses[1].json().then(data => setHomeZones(data));\r\n      })\r\n      .catch(err => {\r\n        throw err;\r\n      });\r\n    setIsLoading(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {isLoading ? (\r\n        <LoadingSpinner />\r\n      ) : (\r\n        <Map vehicleData={vehicleData} homeZones={homeZones} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}