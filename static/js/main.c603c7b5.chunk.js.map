{"version":3,"sources":["components/customMarker/CustomMarker.js","components/homeZoneLayer/HomeZoneLayer.js","images/loading-spinner.gif","components/loadingSpinner/LoadingSpinner.js","components/map/Map.js","components/mevoRoute/MevoRoute.js","App.js","reportWebVitals.js","index.js"],"names":["CustomMarker","iconUrl","position","latitude","Number","longitude","height","src","alt","HomeZoneLayer","data","id","type","source","paint","LoadingSpinner","className","spinner","Map","lat","long","zoom","vehicleData","homeZones","useState","width","viewport","setViewport","userLocation","setUserLocation","requestedRoute","setRequestedRoute","mapboxApiAccessToken","process","onViewportChange","nextViewport","mapStyle","map","i","style","right","top","positionOptions","enableHighAccuracy","trackUserLocation","showAccuracyCircle","onGeolocate","geoLocation","coords","auto","Object","keys","length","onClick","alert","defaultProps","MevoRoute","route","setRoute","useEffect","shortestDistance","MAX_SAFE_INTEGER","nearestMevo","forEach","from","to","dist","distance","fetch","then","response","json","routes","geometry","getNearestMevo","mapboxgl","workerClass","require","default","App","setVehicleData","setHomeZones","isLoading","setIsLoading","a","Promise","all","responses","catch","err","fetchData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c603c7b5.chunk.js","sourcesContent":["import { Marker } from \"react-map-gl\";\r\n\r\nconst CustomMarker = ({ iconUrl, position }) => {\r\n  return (\r\n    <Marker\r\n      latitude={Number(position.latitude)}\r\n      longitude={Number(position.longitude)}\r\n    >\r\n      <img height=\"50\" src={iconUrl} alt=\"vehicle map marker\" />\r\n    </Marker>\r\n  );\r\n};\r\n\r\nexport default CustomMarker;\r\n","import { Source, Layer } from \"react-map-gl\";\r\n\r\nconst HomeZoneLayer = ({ data }) => {\r\n  return (\r\n    <Source id=\"home-zones\" type=\"geojson\" data={data}>\r\n      <Layer\r\n        id=\"home-zones-layer\"\r\n        type=\"line\"\r\n        source=\"home-zones\"\r\n        paint={{ \"line-color\": \"#f7590d\", \"line-width\": 3 }}\r\n      />\r\n    </Source>\r\n  );\r\n};\r\n\r\nexport default HomeZoneLayer;\r\n","export default __webpack_public_path__ + \"static/media/loading-spinner.9dd8c81d.gif\";","import spinner from \"../../images/loading-spinner.gif\";\r\n\r\nimport \"./LoadingSpinner.css\";\r\n\r\nconst LoadingSpinner = () => {\r\n  return (\r\n    <div className=\"loading-spinner\">\r\n      <img src={spinner} alt=\"loading\"></img>\r\n      <h1>Loading</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import React, { useState } from \"react\";\r\nimport ReactMapGL, { GeolocateControl } from \"react-map-gl\";\r\n\r\nimport { CustomMarker, HomeZoneLayer, MevoRoute } from \"../../components\";\r\n\r\nimport \"./Map.css\";\r\n\r\nconst Map = ({ lat, long, zoom, vehicleData, homeZones }) => {\r\n  const [viewport, setViewport] = useState({\r\n    height: \"100vh\",\r\n    width: \"100wh\",\r\n    latitude: lat,\r\n    longitude: long,\r\n    zoom: zoom\r\n  });\r\n\r\n  const [userLocation, setUserLocation] = useState({});\r\n  const [requestedRoute, setRequestedRoute] = useState(false);\r\n\r\n  const geolocateControlStyle = {\r\n    right: 10,\r\n    top: 10\r\n  };\r\n\r\n  return (\r\n    <ReactMapGL\r\n      {...viewport}\r\n      width=\"100vw\"\r\n      height=\"100vh\"\r\n      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKENS}\r\n      onViewportChange={nextViewport => setViewport(nextViewport)}\r\n      mapStyle=\"mapbox://styles/mapbox/basic-v9\"\r\n    >\r\n      {vehicleData.map((data, i) => {\r\n        return <CustomMarker key={`custom-marker-${i}`} {...data} />;\r\n      })}\r\n\r\n      <HomeZoneLayer {...homeZones} />\r\n\r\n      <GeolocateControl\r\n        style={geolocateControlStyle}\r\n        positionOptions={{ enableHighAccuracy: true }}\r\n        trackUserLocation={true}\r\n        showAccuracyCircle={false}\r\n        onGeolocate={geoLocation =>\r\n          setUserLocation({\r\n            lat: geoLocation.coords.latitude,\r\n            long: geoLocation.coords.longitude\r\n          })\r\n        }\r\n        auto\r\n      />\r\n\r\n      {requestedRoute ? (\r\n        <MevoRoute userLocation={userLocation} vehicleData={vehicleData} />\r\n      ) : null}\r\n\r\n      {Object.keys(userLocation).length === 0 ? (\r\n        <button\r\n          className=\"btn-secondary btn-bottom\"\r\n          onClick={() =>\r\n            alert(\r\n              \"Please enable and allow location tracking to use this feature\"\r\n            )\r\n          }\r\n        >\r\n          Find Nearest Mevo\r\n        </button>\r\n      ) : (\r\n        <button\r\n          className=\"btn-primary btn-bottom\"\r\n          onClick={() => setRequestedRoute(!requestedRoute)}\r\n        >\r\n          {requestedRoute ? \"Cancel Find\" : \"Find Nearest Mevo\"}\r\n        </button>\r\n      )}\r\n    </ReactMapGL>\r\n  );\r\n};\r\n\r\n// Load map in Wellington Central Coordinates by default if user doesn't have location enabled\r\nMap.defaultProps = {\r\n  lat: -41.2924,\r\n  long: 174.778,\r\n  zoom: 15\r\n};\r\n\r\nexport default Map;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Source, Layer } from \"react-map-gl\";\r\nimport { distance } from \"@turf/turf\";\r\n\r\nconst MevoRoute = ({ vehicleData, userLocation }) => {\r\n  const [route, setRoute] = useState({});\r\n\r\n  useEffect(() => {\r\n    // using distance package to get shortest distance between current location and all vehicles\r\n    // use mapbox directions api to generate geojson coordinates of path between current location and nearest vehicle\r\n    // set route state and use that for rendering path\r\n    const getNearestMevo = () => {\r\n      var shortestDistance = Number.MAX_SAFE_INTEGER;\r\n      var nearestMevo = {};\r\n      vehicleData.forEach(data => {\r\n        const from = [userLocation.lat, userLocation.long];\r\n        const to = [data.position.latitude, data.position.longitude];\r\n        const dist = distance(from, to);\r\n\r\n        if (dist < shortestDistance) {\r\n          nearestMevo = {\r\n            long: data.position.longitude,\r\n            lat: data.position.latitude\r\n          };\r\n          shortestDistance = dist;\r\n        }\r\n      });\r\n      fetch(\r\n        `https://api.mapbox.com/directions/v5/mapbox/driving/${userLocation.long},${userLocation.lat};${nearestMevo.long},${nearestMevo.lat}?geometries=geojson&access_token=${process.env.REACT_APP_MAPBOX_ACCESS_TOKENS}`\r\n      )\r\n        .then(response => response.json())\r\n        .then(data => setRoute(data.routes[0].geometry));\r\n    };\r\n\r\n    getNearestMevo();\r\n  }, [vehicleData, userLocation]);\r\n\r\n  return (\r\n    <div className=\"mevo-route\">\r\n      {Object.keys(route).length === 0 ? null : (\r\n        <Source id=\"route\" type=\"geojson\" data={route}>\r\n          <Layer\r\n            id=\"route-layer\"\r\n            type=\"line\"\r\n            source=\"route\"\r\n            paint={{ \"line-color\": \"#00afdd\", \"line-width\": 3 }}\r\n          />\r\n        </Source>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MevoRoute;\r\n","import { useState, useEffect } from \"react\";\r\nimport { LoadingSpinner, Map } from \"./components\";\r\nimport 'mapbox-gl/dist/mapbox-gl.css'\r\n\r\n// This is to fix a known deployment issue with React. See here:\r\n// https://github.com/mapbox/mapbox-gl-js/issues/10173\r\nimport mapboxgl from 'mapbox-gl';\r\n// @ts-ignore\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nmapboxgl.workerClass = require('worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker').default;\r\n\r\nfunction App() {\r\n  const [vehicleData, setVehicleData] = useState([]);\r\n  const [homeZones, setHomeZones] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Run fetch in parallel and set is loading to false once both APIs have returned successfully\r\n  async function fetchData() {\r\n    await Promise.all([\r\n      fetch(\"https://api.mevo.co.nz/public/vehicles/all\"),\r\n      fetch(\"https://api.mevo.co.nz/public/home-zones/all\")\r\n    ])\r\n      .then(responses => {\r\n        responses[0].json().then(data => setVehicleData(data));\r\n        responses[1].json().then(data => setHomeZones(data));\r\n      })\r\n      .catch(err => {\r\n        throw err;\r\n      });\r\n    setIsLoading(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {isLoading ? (\r\n        <LoadingSpinner />\r\n      ) : (\r\n        <Map vehicleData={vehicleData} homeZones={homeZones} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}